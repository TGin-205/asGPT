package mathaiagent;

// ===== SMART ERROR HANDLER =====

import java.util.*;

// Error Handler - X·ª≠ l√Ω l·ªói th√¥ng minh
class SmartErrorHandler {

    private Map<String, String> commonErrors;
    private Map<String, List<String>> suggestions;

    public SmartErrorHandler() {
        initializeErrorMappings();
    }

    private void initializeErrorMappings() {
        commonErrors = new HashMap<>();
        suggestions = new HashMap<>();

        commonErrors.put("division by zero", "Kh√¥ng th·ªÉ chia cho 0");
        commonErrors.put("invalid syntax", "C√∫ ph√°p kh√¥ng h·ª£p l·ªá");
        commonErrors.put("undefined function", "H√†m kh√¥ng t·ªìn t·∫°i");
        commonErrors.put("invalid number", "S·ªë kh√¥ng h·ª£p l·ªá");
        commonErrors.put("overflow", "S·ªë qu√° l·ªõn");

        suggestions.put("division by zero", Arrays.asList(
                "Ki·ªÉm tra xem m·∫´u s·ªë c√≥ b·∫±ng 0 kh√¥ng",
                "Th·ª≠ s·ª≠ d·ª•ng gi·ªõi h·∫°n: lim(x‚Üí0) f(x)/g(x)",
                "Xem x√©t tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát khi m·∫´u ti·∫øn v·ªÅ 0"
        ));

        suggestions.put("invalid syntax", Arrays.asList(
                "Ki·ªÉm tra d·∫•u ngo·∫∑c ƒë√≥ng m·ªü",
                "ƒê·∫£m b·∫£o c√°c to√°n t·ª≠ ƒë∆∞·ª£c vi·∫øt ƒë√∫ng (+, -, *, /)",
                "Th·ª≠ di·ªÖn ƒë·∫°t l·∫°i b·∫±ng ti·∫øng Vi·ªát: 'T√≠nh 5 c·ªông 3'"
        ));

        suggestions.put("undefined function", Arrays.asList(
                "Ki·ªÉm tra t√™n h√†m c√≥ ƒë√∫ng kh√¥ng (sin, cos, tan, sqrt, log)",
                "ƒê·∫£m b·∫£o c√∫ ph√°p h√†m ƒë√∫ng: sin(x), kh√¥ng ph·∫£i sinx",
                "Xem danh s√°ch h√†m ƒë∆∞·ª£c h·ªó tr·ª£ trong help"
        ));

        suggestions.put("invalid number", Arrays.asList(
                "Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë (s·ª≠ d·ª•ng d·∫•u ch·∫•m cho th·∫≠p ph√¢n: 3.14)",
                "Tr√°nh s·ª≠ d·ª•ng k√Ω t·ª± ƒë·∫∑c bi·ªát trong s·ªë",
                "ƒê·∫£m b·∫£o s·ªë n·∫±m trong ph·∫°m vi cho ph√©p"
        ));

        suggestions.put("overflow", Arrays.asList(
                "S·ªë qu√° l·ªõn ƒë·ªÉ x·ª≠ l√Ω, th·ª≠ s·ªë nh·ªè h∆°n",
                "Ki·ªÉm tra l·∫°i ph√©p t√≠nh, c√≥ th·ªÉ c√≥ l·ªói logic",
                "S·ª≠ d·ª•ng logarithm ƒë·ªÉ t√≠nh to√°n s·ªë l·ªõn"
        ));
    }

    public ErrorResponse handleError(String errorMessage) {
        String errorType = categorizeError(errorMessage);
        String friendlyMessage = commonErrors.getOrDefault(errorType,
                "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh");
        List<String> suggestions = this.suggestions.getOrDefault(errorType,
                Arrays.asList("Th·ª≠ l·∫°i v·ªõi c√∫ ph√°p kh√°c", "Ki·ªÉm tra ƒë·∫ßu v√†o"));

        return new ErrorResponse(friendlyMessage, suggestions, errorType);
    }

    private String categorizeError(String errorMessage) {
        String lowerMessage = errorMessage.toLowerCase();

        if (lowerMessage.contains("/ by zero") || lowerMessage.contains("division by zero")) {
            return "division by zero";
        }
        if (lowerMessage.contains("syntax") || lowerMessage.contains("token")) {
            return "invalid syntax";
        }
        if (lowerMessage.contains("undefined") || lowerMessage.contains("unknown function")) {
            return "undefined function";
        }
        if (lowerMessage.contains("number format") || lowerMessage.contains("invalid number")) {
            return "invalid number";
        }
        if (lowerMessage.contains("overflow") || lowerMessage.contains("infinity")) {
            return "overflow";
        }

        return "unknown";
    }
}

class ErrorResponse {

    private String message;
    private List<String> suggestions;
    private String errorType;

    public ErrorResponse(String message, List<String> suggestions, String errorType) {
        this.message = message;
        this.suggestions = suggestions;
        this.errorType = errorType;
    }

    public void display() {
        System.out.println("‚ùå " + message);
        System.out.println("\nüí° G·ª£i √Ω:");
        for (String suggestion : suggestions) {
            System.out.println("  ‚Ä¢ " + suggestion);
        }
    }

    // Getters
    public String getMessage() {
        return message;
    }

    public List<String> getSuggestions() {
        return suggestions;
    }

    public String getErrorType() {
        return errorType;
    }
}
