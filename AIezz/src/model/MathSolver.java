package model;

import java.io.*;
import java.net.*;
import java.util.*;

public class MathSolver {

    // ========== CONSTANTS & FIELDS ==========
    private static final String OLLAMA_URL = "http://localhost:11434/api/generate";
    private List<Question> history = new ArrayList<>();
    private final Map<String, String> cache = new HashMap<>();

    // ========== CONSTRUCTOR ==========
    public MathSolver() {
        history = new ArrayList<>();
    }

    // ========== ENUMS ==========
    public enum SearchType {
        ALL,
        QUESTION,
        ANSWER,
        DIFFICULTY
    }

    public enum SortType {
        DIFFICULTY_ASC, // D·ªÖ -> Kh√≥
        DIFFICULTY_DESC, // Kh√≥ -> D·ªÖ
        ID_ASC, // Theo ID tƒÉng d·∫ßn
        ID_DESC         // Theo ID gi·∫£m d·∫ßn
    }

    // ========== CORE MATH SOLVING METHODS ==========
    public String solveMath(String problem) throws Exception {
        if (cache.containsKey(problem)) {
            return "üìã T·ª´ b·ªô nh·ªõ: " + cache.get(problem);
        }

        if (history.size() >= 100) {
            history.remove(0);
        }

        String result = sendToOllamaAndGetResponse(problem);

        // Create and store a new Question object
        String id = "Q" + (history.size() + 1);
        Question newQuestion = new Question(id, problem, result, assessDifficultyInternal(problem));
        history.add(newQuestion);

        cache.put(problem, result);
        return result;
    }

    public String explainSolution(String problem) throws Exception {
        String prompt = "B·∫°n l√† gi√°o vi√™n to√°n h·ªçc. H√£y gi·∫£i th√≠ch chi ti·∫øt c√°ch gi·∫£i b√†i to√°n:\n"
                + problem + "\n"
                + "Y√™u c·∫ßu:\n"
                + "- Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc m·ªôt c√°ch d·ªÖ hi·ªÉu\n"
                + "- N√™u l√Ω do t·∫°i sao l√†m nh∆∞ v·∫≠y\n"
                + "- ƒê∆∞a ra l·ªùi khuy√™n h·ªçc t·∫≠p";

        String jsonRequest = "{"
                + "\"model\": \"mistral\","
                + "\"prompt\": \"" + escapeJson(prompt) + "\","
                + "\"stream\": false,"
                + "\"options\": {\"temperature\": 0.3}"
                + "}";

        String response = sendToOllama(jsonRequest);
        return extractResponse(response);
    }

    public String generateSimilarProblem(String problem) throws Exception {
        String prompt = "D·ª±a v√†o b√†i to√°n: " + problem + "\n"
                + "H√£y t·∫°o 3 b√†i to√°n t∆∞∆°ng t·ª± v·ªõi ƒë·ªô kh√≥ t∆∞∆°ng ƒë∆∞∆°ng.\n"
                + "Format:\n"
                + "B√†i 1: ...\n"
                + "B√†i 2: ...\n"
                + "B√†i 3: ...";

        String jsonRequest = "{"
                + "\"model\": \"mistral\","
                + "\"prompt\": \"" + escapeJson(prompt) + "\","
                + "\"stream\": false,"
                + "\"options\": {\"temperature\": 0.7}"
                + "}";

        String response = sendToOllama(jsonRequest);
        return extractResponse(response);
    }

    public String assessDifficulty(String problem) throws Exception {
        String prompt = "H√£y ƒë√°nh gi√° ƒë·ªô kh√≥ c·ªßa b√†i to√°n: " + problem + "\n"
                + "Tr·∫£ l·ªùi theo format:\n"
                + "ƒê·ªô kh√≥: [D·ªÖ/Trung b√¨nh/Kh√≥]\n"
                + "L√Ω do: ...\n"
                + "Ki·∫øn th·ª©c c·∫ßn: ...";

        String jsonRequest = "{"
                + "\"model\": \"mistral\","
                + "\"prompt\": \"" + escapeJson(prompt) + "\","
                + "\"stream\": false,"
                + "\"options\": {\"temperature\": 0.2}"
                + "}";

        String response = sendToOllama(jsonRequest);
        return extractResponse(response);
    }

    // ========== QUESTION MANAGEMENT ==========
    public void addCustomQuestion(String questionText, String answerText, String difficultyLevel) {
        String id = "Q" + (history.size() + 1);
        Question question = new Question(id, questionText, answerText, difficultyLevel);
        history.add(question);
    }

    public boolean deleteQuestion(String id) {
        if (id == null || id.trim().isEmpty()) {
            return false;
        }

        int indexToRemove = -1;
        for (int i = 0; i < history.size(); i++) {
            if (history.get(i).getId().equalsIgnoreCase(id)) {
                indexToRemove = i;
                break;
            }
        }

        if (indexToRemove != -1) {
            history.remove(indexToRemove);
            return true;
        }
        return false;
    }

    public Question findQuestionById(String id) {
        for (Question question : history) {
            if (question.getId().equalsIgnoreCase(id)) {
                return question;
            }
        }
        return null;
    }

    // ========== HISTORY & SEARCH METHODS ==========
    public List<Question> getHistory() {
        return new ArrayList<>(history);
    }

    public List<Question> searchHistory(String keyword, SearchType type) {
        List<Question> results = new ArrayList<>();
        keyword = keyword.toLowerCase();

        for (Question question : history) {
            boolean match = switch (type) {
                case QUESTION ->
                    question.getQuestion().toLowerCase().contains(keyword);
                case ANSWER ->
                    question.getAnswerS().toLowerCase().contains(keyword);
                case DIFFICULTY ->
                    question.getDifficulty().toLowerCase().contains(keyword);
                case ALL ->
                    question.getQuestion().toLowerCase().contains(keyword)
                    || question.getAnswerS().toLowerCase().contains(keyword)
                    || question.getDifficulty().toLowerCase().contains(keyword);
            };

            if (match) {
                results.add(question);
            }
        }
        return results;
    }

    public List<Question> getSortedHistory(SortType sortType) {
        List<Question> sortedHistory = new ArrayList<>(history);

        switch (sortType) {
            case DIFFICULTY_ASC ->
                sortedHistory.sort((q1, q2) -> {
                    int diff1 = getDifficultyValue(q1.getDifficulty());
                    int diff2 = getDifficultyValue(q2.getDifficulty());
                    return Integer.compare(diff1, diff2);
                });
            case DIFFICULTY_DESC ->
                sortedHistory.sort((q1, q2) -> {
                    int diff1 = getDifficultyValue(q1.getDifficulty());
                    int diff2 = getDifficultyValue(q2.getDifficulty());
                    return Integer.compare(diff2, diff1);
                });
            case ID_ASC ->
                sortedHistory.sort((q1, q2) -> {
                    int id1 = extractIdNumber(q1.getId());
                    int id2 = extractIdNumber(q2.getId());
                    return Integer.compare(id1, id2);
                });
            case ID_DESC ->
                sortedHistory.sort((q1, q2) -> {
                    int id1 = extractIdNumber(q1.getId());
                    int id2 = extractIdNumber(q2.getId());
                    return Integer.compare(id2, id1);
                });
        }

        return sortedHistory;
    }

    public List<Question> getQuestionsByDifficulty(String difficulty) {
        return history.stream()
                .filter(q -> q.getDifficulty().equalsIgnoreCase(difficulty))
                .collect(java.util.stream.Collectors.toList());
    }

    // ========== STATISTICS & CACHE METHODS ==========
    public String getHistoryStats() {
        if (history.isEmpty()) {
            return "üìä Ch∆∞a c√≥ b√†i to√°n n√†o trong l·ªãch s·ª≠";
        }

        int easy = 0;
        int medium = 0;
        int hard = 0;

        for (Question question : history) {
            switch (question.getDifficulty().toLowerCase()) {
                case "easy" ->
                    easy++;
                case "hard" ->
                    hard++;
                default ->
                    medium++;
            }
        }

        return "üìä Th·ªëng k√™ l·ªãch s·ª≠:\n"
                + "- T·ªïng: " + history.size() + " b√†i\n"
                + "- D·ªÖ: " + easy + " b√†i\n"
                + "- Trung b√¨nh: " + medium + " b√†i\n"
                + "- Kh√≥: " + hard + " b√†i";
    }

    public void clearCache() {
        cache.clear();
    }

    public String getCacheStats() {
        return "üìä Cache: " + cache.size() + " b√†i to√°n ƒë√£ l∆∞u";
    }

    // ========== FILE I/O METHODS ==========
    public void saveHistory(String filename) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (Question question : history) {
                // Write each field separated by a delimiter (using ||| to avoid conflicts)
                writer.write(question.getId() + "|||"
                        + question.getQuestion() + "|||"
                        + question.getAnswerS() + "|||"
                        + question.getDifficulty() + "\n");
            }
        }
    }

    public void loadHistory(String filename) throws IOException {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            history.clear();
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    String[] parts = line.split("\\|\\|\\|");
                    if (parts.length == 4) {
                        Question question = new Question(
                                parts[0].trim(), // id
                                parts[1].trim(), // question
                                parts[2].trim(), // answer
                                parts[3].trim() // difficulty
                        );
                        history.add(question);
                    }
                }
            }
        }
    }

    // ========== OLLAMA CONNECTION METHODS ==========
    public boolean checkOllama() {
        try {
            URL url = new URL("http://localhost:11434/api/tags");
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(5000);

            int code = conn.getResponseCode();
            conn.disconnect();

            return code == 200;
        } catch (IOException e) {
            return false;
        }
    }

    // ========== PRIVATE HELPER METHODS ==========
    private String sendToOllamaAndGetResponse(String problem) throws Exception {
        String prompt = buildPrompt(problem);

        String jsonRequest = "{"
                + "\"model\": \"mistral\","
                + "\"prompt\": \"" + escapeJson(prompt) + "\","
                + "\"stream\": false,"
                + "\"options\": {\"temperature\": 0.1}"
                + "}";

        String response = sendToOllama(jsonRequest);
        return extractResponse(response);
    }

    private String buildPrompt(String problem) {
        StringBuilder prompt = new StringBuilder();
        if (problem.contains("=")) {
            prompt.append("B·∫°n l√† gi√°o vi√™n to√°n h·ªçc. H√£y gi·∫£i ph∆∞∆°ng tr√¨nh sau:\n");
            prompt.append(problem).append("\n");
            prompt.append("Y√™u c·∫ßu:\n");
            prompt.append("- Tr√¨nh b√†y t·ª´ng b∆∞·ªõc gi·∫£i r√µ r√†ng\n");
            prompt.append("- Ki·ªÉm tra nghi·ªám\n");
            prompt.append("- Tr·∫£ l·ªùi ng·∫Øn g·ªçn");
        } else if (problem.toLowerCase().contains("di·ªán t√≠ch")
                || problem.toLowerCase().contains("chu vi")
                || problem.toLowerCase().contains("th·ªÉ t√≠ch")) {
            prompt.append("B·∫°n l√† gi√°o vi√™n h√¨nh h·ªçc. H√£y gi·∫£i b√†i to√°n sau:\n");
            prompt.append(problem).append("\n");
            prompt.append("Y√™u c·∫ßu:\n");
            prompt.append("- X√°c ƒë·ªãnh c√¥ng th·ª©c c·∫ßn d√πng\n");
            prompt.append("- Th·∫ø s·ªë v√†o c√¥ng th·ª©c\n");
            prompt.append("- T√≠nh to√°n v√† ƒë∆∞a ra k·∫øt qu·∫£");
        } else {
            prompt.append("B·∫°n l√† gi√°o vi√™n to√°n h·ªçc. H√£y t√≠nh to√°n:\n");
            prompt.append(problem).append("\n");
            prompt.append("Tr·∫£ l·ªùi ng·∫Øn g·ªçn v·ªõi k·∫øt qu·∫£ ch√≠nh x√°c.");
        }

        return prompt.toString();
    }

    private String sendToOllama(String jsonData) throws Exception {
        URL url = new URL(OLLAMA_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();

        try {
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
            connection.setRequestProperty("Accept", "application/json");
            connection.setDoOutput(true);
            connection.setConnectTimeout(30000);
            connection.setReadTimeout(180000);

            try (OutputStreamWriter writer = new OutputStreamWriter(
                    connection.getOutputStream(), "UTF-8")) {
                writer.write(jsonData);
                writer.flush();
            }

            int responseCode = connection.getResponseCode();
            if (responseCode != 200) {
                throw new Exception("L·ªói Ollama (" + responseCode + ")");
            }

            try (BufferedReader reader = new BufferedReader(
                    new InputStreamReader(connection.getInputStream(), "UTF-8"))) {

                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                return response.toString();
            }

        } finally {
            connection.disconnect();
        }
    }

    private String extractResponse(String jsonResponse) {
        try {
            if (jsonResponse == null || jsonResponse.trim().isEmpty()) {
                return "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ AI.";
            }

            int responseStart = jsonResponse.indexOf("\"response\":\"");
            if (responseStart == -1) {
                return "‚ùå ƒê·ªãnh d·∫°ng ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá.";
            }

            responseStart += 12; // Skip "\"response\":\""
            int responseEnd = jsonResponse.indexOf("\",\"", responseStart);
            if (responseEnd == -1) {
                responseEnd = jsonResponse.lastIndexOf("\"");
            }

            if (responseEnd <= responseStart) {
                return "‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi.";
            }

            String response = jsonResponse.substring(responseStart, responseEnd);

            response = cleanResponse(response);

            if (response.length() > 2000) {
                response = response.substring(0, 2000) + "...\n[Ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c r√∫t g·ªçn]";
            }

            return response.trim();

        } catch (Exception e) {
            return "‚ùå L·ªói x·ª≠ l√Ω: " + e.getMessage();
        }
    }

    private String cleanResponse(String response) {
        return response.replace("\\n", "\n")
                .replace("\\\"", "\"")
                .replace("\\\\", "\\")
                .replace("\\t", "\t")
                .replace("\\r", "\r")
                .replaceAll("^\\s+", "") // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu
                .replaceAll("\\s+$", ""); // X√≥a kho·∫£ng tr·∫Øng cu·ªëi
    }

    private String assessDifficultyInternal(String problem) {
        try {
            String assessment = assessDifficulty(problem);
            // Extract difficulty level from assessment
            if (assessment.toLowerCase().contains("d·ªÖ")) {
                return "Easy";
            }
            if (assessment.toLowerCase().contains("kh√≥")) {
                return "Hard";
            }
            return "Medium";
        } catch (Exception e) {
            return "Medium"; // Default difficulty
        }
    }

    private int getDifficultyValue(String difficulty) {
        return switch (difficulty.toLowerCase()) {
            case "easy" ->
                1;
            case "medium" ->
                2;
            case "hard" ->
                3;
            default ->
                2; // medium l√†m m·∫∑c ƒë·ªãnh
        };
    }

    private int extractIdNumber(String id) {
        try {
            return Integer.parseInt(id.substring(1)); // B·ªè ch·ªØ 'Q'
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    private String escapeJson(String text) {
        return text.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }
}