package view;

import controller.MathController;
import javax.swing.*;
import java.awt.*;
import java.io.IOException;


public class MathSolverGUI extends JFrame {
    
    private final MathController controller;
    private JTextField problemField;
    private JTextArea resultArea;
    private JTextArea historyArea;
    
    public MathSolverGUI() {
        controller = new MathController();
        initComponents();
        setupLayout();
    }
    
    private void initComponents() {
        setTitle("Gi·∫£i To√°n v·ªõi Mistral");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(800, 600);
        setLocationRelativeTo(null);
        
        // Input panel
        problemField = new JTextField(30);
        
        // Result area
        resultArea = new JTextArea(15, 40);
        resultArea.setEditable(false);
        resultArea.setFont(new Font("Arial", Font.PLAIN, 12));
        resultArea.setBackground(Color.WHITE);
        
        // History area
        historyArea = new JTextArea(15, 30);
        historyArea.setEditable(false);
        historyArea.setFont(new Font("Arial", Font.PLAIN, 11));
        historyArea.setBackground(new Color(248, 248, 248));
    }
    
    private void setupLayout() {
        setLayout(new BorderLayout());
        
        // Top panel - Input
        JPanel inputPanel = new JPanel(new FlowLayout());
        inputPanel.add(new JLabel("B√†i to√°n:"));
        inputPanel.add(problemField);
        
        JButton solveBtn = new JButton("Gi·∫£i");
        JButton clearBtn = new JButton("X√≥a");
        JButton helpBtn = new JButton("H∆∞·ªõng d·∫´n");
        
        inputPanel.add(solveBtn);
        inputPanel.add(clearBtn);
        inputPanel.add(helpBtn);
        
        // Center panel - Result and History
        JPanel centerPanel = new JPanel(new BorderLayout());
        
        // Result panel
        JPanel resultPanel = new JPanel(new BorderLayout());
        resultPanel.add(new JLabel("K·∫øt qu·∫£:"), BorderLayout.NORTH);
        resultPanel.add(new JScrollPane(resultArea), BorderLayout.CENTER);
        
        // History panel
        JPanel historyPanel = new JPanel(new BorderLayout());
        historyPanel.add(new JLabel("L·ªãch s·ª≠:"), BorderLayout.NORTH);
        historyPanel.add(new JScrollPane(historyArea), BorderLayout.CENTER);
        
        // Bottom buttons
        JPanel bottomPanel = new JPanel(new FlowLayout());
        JButton historyBtn = new JButton("Xem l·ªãch s·ª≠");
        JButton saveBtn = new JButton("L∆∞u l·ªãch s·ª≠");
        JButton loadBtn = new JButton("T·∫£i l·ªãch s·ª≠");
        JButton checkBtn = new JButton("Ki·ªÉm tra h·ªá th·ªëng");
        
        bottomPanel.add(historyBtn);
        bottomPanel.add(saveBtn);
        bottomPanel.add(loadBtn);
        bottomPanel.add(checkBtn);
        
        // Layout
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, 
            resultPanel, historyPanel);
        splitPane.setDividerLocation(500);
        
        centerPanel.add(splitPane, BorderLayout.CENTER);
        centerPanel.add(bottomPanel, BorderLayout.SOUTH);
        
        add(inputPanel, BorderLayout.NORTH);
        add(centerPanel, BorderLayout.CENTER);
        
        // Events
        solveBtn.addActionListener(e -> solveProblem());
        clearBtn.addActionListener(e -> clearAll());
        helpBtn.addActionListener(e -> showHelp());
        historyBtn.addActionListener(e -> showHistory());
        saveBtn.addActionListener(e -> saveHistory());
        loadBtn.addActionListener(e -> loadHistory());
        checkBtn.addActionListener(e -> checkSystem());
        
        // Enter key
        problemField.addActionListener(e -> solveProblem());
    }

    
    private void solveProblem() {
        String problem = problemField.getText().trim();
        if (problem.isEmpty()) {
            showMessage("Vui l√≤ng nh·∫≠p b√†i to√°n!");
            return;
        }
        
        resultArea.setText("ü§ñ ƒêang gi·∫£i...");
        
        // Ch·∫°y trong thread ri√™ng ƒë·ªÉ kh√¥ng block UI
        SwingUtilities.invokeLater(() -> {
            try {
                String result = controller.getModel().solveMath(problem);
                resultArea.setText(result);
                problemField.setText("");
            } catch (Exception e) {
                resultArea.setText("L·ªói: " + e.getMessage());
            }
        });
    }
    
    private void clearAll() {
        problemField.setText("");
        resultArea.setText("");
    }
    
    private void showHelp() {
        String help = """
            === H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ===
            
            C√°c lo·∫°i to√°n c√≥ th·ªÉ gi·∫£i:
            ‚Ä¢ T√≠nh to√°n: 2 + 3 * 4
            ‚Ä¢ Ph∆∞∆°ng tr√¨nh: x^2 + 5x + 6 = 0
            ‚Ä¢ H√¨nh h·ªçc: T√≠nh di·ªán t√≠ch h√¨nh tr√≤n b√°n k√≠nh 5
            ‚Ä¢ ƒê·∫°i s·ªë: R√∫t g·ªçn (x+1)(x+2)
            ‚Ä¢ B√†i to√°n ·ª©ng d·ª•ng
            
            V√≠ d·ª•:
            'Gi·∫£i ph∆∞∆°ng tr√¨nh x^2 - 5x + 6 = 0'
            'T√≠nh chu vi h√¨nh vu√¥ng c·∫°nh 4'
            '15 + 25 * 2 = ?'
            """;
        JOptionPane.showMessageDialog(this, help, "H∆∞·ªõng d·∫´n", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void showHistory() {
        java.util.List<String> history = controller.getModel().getHistory();
        StringBuilder sb = new StringBuilder();
        
        if (history.isEmpty()) {
            sb.append("Ch∆∞a c√≥ b√†i to√°n n√†o.");
        } else {
            for (int i = 0; i < history.size(); i++) {
                sb.append((i + 1)).append(". ").append(history.get(i)).append("\n");
            }
        }
        
        historyArea.setText(sb.toString());
    }
    
    private void saveHistory() {
        String filename = JOptionPane.showInputDialog(this, "Nh·∫≠p t√™n file:", "math_history.txt");
        if (filename != null && !filename.trim().isEmpty()) {
            try {
                controller.getModel().saveHistory(filename);
                showMessage("‚úÖ ƒê√£ l∆∞u l·ªãch s·ª≠ v√†o " + filename);
            } catch (IOException e) {
                showError("L·ªói khi l∆∞u file: " + e.getMessage());
            }
        }
    }
    
    private void loadHistory() {
        String filename = JOptionPane.showInputDialog(this, "Nh·∫≠p t√™n file:", "math_history.txt");
        if (filename != null && !filename.trim().isEmpty()) {
            try {
                controller.getModel().loadHistory(filename);
                showMessage("‚úÖ ƒê√£ t·∫£i l·ªãch s·ª≠ t·ª´ " + filename);
                showHistory(); // Refresh history display
            } catch (IOException e) {
                showError("L·ªói khi ƒë·ªçc file: " + e.getMessage());
            }
        }
    }
    
    private void checkSystem() {
        resultArea.setText("üîç Ki·ªÉm tra h·ªá th·ªëng...");
        
        SwingUtilities.invokeLater(() -> {
            if (controller.getModel().checkOllama()) {
                resultArea.setText("‚úÖ Ollama ƒë√£ s·∫µn s√†ng!");
            } else {
                resultArea.setText("""
                    ‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Ollama!
                    
                    H√£y ch·∫Øc ch·∫Øn:
                    1. ƒê√£ c√†i Ollama
                    2. Ch·∫°y: ollama serve
                    3. T·∫£i model: ollama pull mistral
                    """);
            }
        });
    }
    
    private void showMessage(String message) {
        JOptionPane.showMessageDialog(this, message, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void showError(String error) {
        JOptionPane.showMessageDialog(this, error, "L·ªói", JOptionPane.ERROR_MESSAGE);
    }
    
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e) {
            }
            
            new MathSolverGUI().setVisible(true);
        });
    }
}