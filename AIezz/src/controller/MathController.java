package controller;

import model.MathSolver;
import view.MathView;
import java.io.*;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.util.List;

public class MathController {

    private final MathSolver model;
    private final MathView view;

    public MathController() {
        model = new MathSolver();
        view = new MathView();
    }

    public MathSolver getModel() {
        return model;
    }

    public void solveProblem() {
        try {
            String problem = view.inputProblem();
            if (problem == null || problem.trim().isEmpty()) {
                view.showMessage("Vui l√≤ng nh·∫≠p b√†i to√°n!");
                return;
            }
            if (problem.length() > 1000) {
                view.showError("B√†i to√°n qu√° d√†i! (t·ªëi ƒëa 1000 k√Ω t·ª±)");
                return;
            }

            view.showMessage("ü§ñ ƒêang gi·∫£i...");
            String result = model.solveMath(problem);
            view.showResult(result);

        } catch (ConnectException e) {
            view.showError("L·ªói k·∫øt n·ªëi: Kh√¥ng th·ªÉ k·∫øt n·ªëi Ollama!");
        } catch (SocketTimeoutException e) {
            view.showError("L·ªói timeout: Ollama m·∫•t qu√° l√¢u ƒë·ªÉ ph·∫£n h·ªìi!");
        } catch (IOException e) {
            view.showError("L·ªói I/O: " + e.getMessage());
        } catch (Exception e) {
            view.showError("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
        }
    }

    public void explainProblem() {
        try {
            String problem = view.inputProblem();
            if (problem == null || problem.trim().isEmpty()) {
                view.showMessage("Vui l√≤ng nh·∫≠p b√†i to√°n c·∫ßn gi·∫£i th√≠ch!");
                return;
            }

            view.showMessage("üß† ƒêang gi·∫£i th√≠ch...");
            String explanation = model.explainSolution(problem);
            view.showResult("üìñ Gi·∫£i th√≠ch chi ti·∫øt:\n" + explanation);

        } catch (Exception e) {
            view.showError("L·ªói khi gi·∫£i th√≠ch: " + e.getMessage());
        }
    }

    public void generateSimilarProblems() {
        try {
            String problem = view.inputProblem();
            if (problem == null || problem.trim().isEmpty()) {
                view.showMessage("Vui l√≤ng nh·∫≠p b√†i to√°n m·∫´u!");
                return;
            }

            view.showMessage("üéØ ƒêang t·∫°o b√†i t∆∞∆°ng t·ª±...");
            String similar = model.generateSimilarProblem(problem);
            view.showResult("üìù B√†i to√°n t∆∞∆°ng t·ª±:\n" + similar);

        } catch (Exception e) {
            view.showError("L·ªói khi t·∫°o b√†i t∆∞∆°ng t·ª±: " + e.getMessage());
        }
    }


    public void assessDifficulty() {
        try {
            String problem = view.inputProblem();
            if (problem == null || problem.trim().isEmpty()) {
                view.showMessage("Vui l√≤ng nh·∫≠p b√†i to√°n c·∫ßn ƒë√°nh gi√°!");
                return;
            }

            view.showMessage("üîç ƒêang ƒë√°nh gi√° ƒë·ªô kh√≥...");
            String assessment = model.assessDifficulty(problem);
            view.showResult("üìä ƒê√°nh gi√° ƒë·ªô kh√≥:\n" + assessment);

        } catch (Exception e) {
            view.showError("L·ªói khi ƒë√°nh gi√°: " + e.getMessage());
        }
    }

    // T√çNH NƒÇNG M·ªöI - T√¨m ki·∫øm l·ªãch s·ª≠
    public void searchHistory() {
        try {
            String keyword = view.inputFilename("Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm");
            if (keyword == null || keyword.trim().isEmpty()) {
                view.showMessage("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a!");
                return;
            }

            List<String> results = model.searchHistory(keyword);
            if (results.isEmpty()) {
                view.showMessage("Kh√¥ng t√¨m th·∫•y b√†i to√°n n√†o ch·ª©a: " + keyword);
            } else {
                view.showMessage("üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho '" + keyword + "':");
                view.showHistory(results);
            }

        } catch (Exception e) {
            view.showError("L·ªói khi t√¨m ki·∫øm: " + e.getMessage());
        }
    }

    // T√çNH NƒÇNG M·ªöI - Xem th·ªëng k√™
    public void showStatistics() {
        try {
            String historyStats = model.getHistoryStats();
            String cacheStats = model.getCacheStats();
            
            view.showMessage("üìä TH·ªêNG K√ä H·ªÜ TH·ªêNG:");
            view.showMessage(historyStats);
            view.showMessage(cacheStats);

        } catch (Exception e) {
            view.showError("L·ªói khi xem th·ªëng k√™: " + e.getMessage());
        }
    }

    // T√çNH NƒÇNG M·ªöI - X√≥a cache
    public void clearCache() {
        try {
            model.clearCache();
            view.showMessage("‚úÖ ƒê√£ x√≥a cache th√†nh c√¥ng!");

        } catch (Exception e) {
            view.showError("L·ªói khi x√≥a cache: " + e.getMessage());
        }
    }

    // C√ÅC T√çNH NƒÇNG C≈® (gi·ªØ nguy√™n)
    public void showHistory() {
        List<String> history = model.getHistory();
        view.showHistory(history);
    }

    public void saveHistory() {
        try {
            String filename = view.inputFilename("Nh·∫≠p t√™n file ƒë·ªÉ l∆∞u");
            if (filename == null || filename.trim().isEmpty()) {
                filename = "math_history.txt";
            }

            model.saveHistory(filename);
            view.showMessage("‚úÖ ƒê√£ l∆∞u l·ªãch s·ª≠ v√†o " + filename);

        } catch (IOException e) {
            view.showError("L·ªói khi l∆∞u file: " + e.getMessage());
        }
    }

    public void loadHistory() {
        try {
            String filename = view.inputFilename("Nh·∫≠p t√™n file ƒë·ªÉ ƒë·ªçc");
            if (filename == null || filename.trim().isEmpty()) {
                filename = "math_history.txt";
            }

            model.loadHistory(filename);
            view.showMessage("‚úÖ ƒê√£ t·∫£i l·ªãch s·ª≠ t·ª´ " + filename);

        } catch (FileNotFoundException e) {
            view.showError("File kh√¥ng t·ªìn t·∫°i: " + e.getMessage());
        } catch (IOException e) {
            view.showError("L·ªói khi ƒë·ªçc file: " + e.getMessage());
        }
    }

    public void checkSystem() {
        view.showMessage("üîç Ki·ªÉm tra h·ªá th·ªëng...");

        if (model.checkOllama()) {
            view.showMessage("‚úÖ Ollama ƒë√£ s·∫µn s√†ng!");
        } else {
            view.showError("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi Ollama!");
            view.showMessage("H√£y ch·∫Øc ch·∫Øn:");
            view.showMessage("1. ƒê√£ c√†i Ollama");
            view.showMessage("2. Ch·∫°y: ollama serve");
            view.showMessage("3. T·∫£i model: ollama pull mistral");
        }
    }

    public void showHelp() {
        view.showHelp();
    }
}